#!/bin/bash
# Script de migration de MySQL vers PostgreSQL pour Les Audacieuses
# √Ä ex√©cuter depuis le r√©pertoire racine du projet

echo "==================================================="
echo "  Migration de MySQL vers PostgreSQL pour Render"
echo "==================================================="
echo ""

# V√©rifier si nous sommes dans le bon r√©pertoire
if [ ! -d "AudacieusesAPI" ] || [ ! -d "AudacieusesWeb" ]; then
  echo "ERROR: Ce script doit √™tre ex√©cut√© depuis le r√©pertoire racine du projet Les Audacieuses."
  exit 1
fi

# √âtape 1: Installer les d√©pendances PostgreSQL
echo "√âtape 1: Installation des d√©pendances PostgreSQL..."
cd AudacieusesAPI
npm install pg pg-hstore --save
echo "‚úÖ D√©pendances PostgreSQL install√©es avec succ√®s."
echo ""

# √âtape 2: Adapter les mod√®les pour PostgreSQL
echo "√âtape 2: Adaptation des mod√®les Sequelize pour PostgreSQL..."
npm run adapt-models
echo "‚úÖ Mod√®les adapt√©s pour PostgreSQL."
echo ""

# √âtape 3: Adapter les requ√™tes SQL
echo "√âtape 3: Adaptation des requ√™tes SQL pour PostgreSQL..."
npm run adapt-queries
echo "‚úÖ Requ√™tes SQL adapt√©es pour PostgreSQL."
echo ""

# √âtape 4: Demander les informations de connexion aux bases de donn√©es
echo "√âtape 4: Configuration des connexions aux bases de donn√©es..."
echo ""
echo "Entrez les informations de connexion √† votre base de donn√©es MySQL source:"
read -p "H√¥te MySQL (d√©faut: localhost): " MYSQL_HOST
MYSQL_HOST=${MYSQL_HOST:-localhost}
read -p "Utilisateur MySQL (d√©faut: root): " MYSQL_USER
MYSQL_USER=${MYSQL_USER:-root}
read -s -p "Mot de passe MySQL: " MYSQL_PASSWORD
echo ""
read -p "Nom de la base de donn√©es MySQL (d√©faut: audacieuses_db): " MYSQL_DATABASE
MYSQL_DATABASE=${MYSQL_DATABASE:-audacieuses_db}

echo ""
echo "Entrez les informations de connexion √† votre base de donn√©es PostgreSQL cible:"
read -p "H√¥te PostgreSQL (d√©faut: localhost): " PG_HOST
PG_HOST=${PG_HOST:-localhost}
read -p "Port PostgreSQL (d√©faut: 5432): " PG_PORT
PG_PORT=${PG_PORT:-5432}
read -p "Utilisateur PostgreSQL (d√©faut: postgres): " PG_USER
PG_USER=${PG_USER:-postgres}
read -s -p "Mot de passe PostgreSQL: " PG_PASSWORD
echo ""
read -p "Nom de la base de donn√©es PostgreSQL (d√©faut: audacieuses_db): " PG_DATABASE
PG_DATABASE=${PG_DATABASE:-audacieuses_db}

# Cr√©er le fichier .env avec les informations de connexion
echo "# Configuration g√©n√©r√©e par le script de migration" > .env
echo "NODE_ENV=development" >> .env
echo "PORT=3000" >> .env
echo "JWT_SECRET=audacieuses-secret-key" >> .env
echo "" >> .env
echo "# Configuration MySQL (source)" >> .env
echo "MYSQL_HOST=$MYSQL_HOST" >> .env
echo "MYSQL_USER=$MYSQL_USER" >> .env
echo "MYSQL_PASSWORD=$MYSQL_PASSWORD" >> .env
echo "MYSQL_DATABASE=$MYSQL_DATABASE" >> .env
echo "" >> .env
echo "# Configuration PostgreSQL (cible)" >> .env
echo "PG_HOST=$PG_HOST" >> .env
echo "PG_PORT=$PG_PORT" >> .env
echo "PG_USER=$PG_USER" >> .env
echo "PG_PASSWORD=$PG_PASSWORD" >> .env
echo "PG_DATABASE=$PG_DATABASE" >> .env
echo "" >> .env
echo "# Configuration active (PostgreSQL)" >> .env
echo "DB_HOST=$PG_HOST" >> .env
echo "DB_USER=$PG_USER" >> .env
echo "DB_PASSWORD=$PG_PASSWORD" >> .env
echo "DB_NAME=$PG_DATABASE" >> .env

echo "‚úÖ Fichier .env cr√©√© avec succ√®s."
echo ""

# √âtape 5: Cr√©er la base de donn√©es PostgreSQL si elle n'existe pas
echo "√âtape 5: Pr√©paration de la base de donn√©es PostgreSQL..."
# Cette commande v√©rifie si la base de donn√©es existe d√©j√†
PGPASSWORD=$PG_PASSWORD psql -h $PG_HOST -p $PG_PORT -U $PG_USER -d postgres -tc "SELECT 1 FROM pg_database WHERE datname = '$PG_DATABASE'" | grep -q 1
if [ $? -ne 0 ]; then
  echo "Cr√©ation de la base de donn√©es PostgreSQL $PG_DATABASE..."
  PGPASSWORD=$PG_PASSWORD psql -h $PG_HOST -p $PG_PORT -U $PG_USER -d postgres -c "CREATE DATABASE $PG_DATABASE;"
  echo "‚úÖ Base de donn√©es PostgreSQL cr√©√©e avec succ√®s."
else
  echo "La base de donn√©es PostgreSQL $PG_DATABASE existe d√©j√†."
fi
echo ""

# √âtape 6: Initialiser la structure de la base de donn√©es PostgreSQL
echo "√âtape 6: Initialisation de la structure PostgreSQL..."
PGPASSWORD=$PG_PASSWORD psql -h $PG_HOST -p $PG_PORT -U $PG_USER -d $PG_DATABASE -f src/config/init-postgres-database.sql
echo "‚úÖ Structure PostgreSQL initialis√©e avec succ√®s."
echo ""

# √âtape 7: Migration des donn√©es
echo "√âtape 7: Migration des donn√©es de MySQL vers PostgreSQL..."
npm run migrate-to-postgres
echo "‚úÖ Migration des donn√©es termin√©e."
echo ""

# √âtape 8: Mise √† jour du fichier render.yaml
echo "√âtape 8: V√©rification du fichier render.yaml..."
cd ..
if [ -f "render.yaml" ]; then
  # V√©rifier si le fichier a d√©j√† √©t√© mis √† jour pour PostgreSQL
  if grep -q "type: postgres" render.yaml; then
    echo "‚úÖ Le fichier render.yaml est d√©j√† configur√© pour PostgreSQL."
  else
    # Sauvegarder l'original
    cp render.yaml render.yaml.mysql.bak
    
    # Remplacer MySQL par PostgreSQL
    sed -i 's/type: mysql/type: postgres/g' render.yaml
    echo "‚úÖ Fichier render.yaml mis √† jour pour utiliser PostgreSQL."
  fi
else
  echo "‚ö†Ô∏è Le fichier render.yaml n'a pas √©t√© trouv√©. Vous devrez le configurer manuellement."
fi
echo ""

# √âtape 9: Derni√®res instructions
echo "==================================================="
echo "  Migration termin√©e avec succ√®s!"
echo "==================================================="
echo ""
echo "Pour d√©ployer sur Render:"
echo ""
echo "1. Assurez-vous que votre code est commit√© sur un d√©p√¥t Git."
echo "2. Connectez-vous √† Render et cr√©ez un nouveau Blueprint."
echo "3. Connectez votre d√©p√¥t Git."
echo "4. Render d√©tectera le fichier render.yaml et configurera les services."
echo ""
echo "Documentation compl√®te dans le fichier MYSQL_TO_POSTGRES_MIGRATION.md"
echo "et RENDER_POSTGRES_DEPLOYMENT.md"
echo ""
echo "Bon d√©ploiement! üöÄ"
